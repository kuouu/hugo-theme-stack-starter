<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CMU on Hugo Theme Stack Starter</title><link>https://demo.stack.jimmycai.com/categories/cmu/</link><description>Recent content in CMU on Hugo Theme Stack Starter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://demo.stack.jimmycai.com/categories/cmu/index.xml" rel="self" type="application/rss+xml"/><item><title>CMU Cloud Computing 修課心得</title><link>https://demo.stack.jimmycai.com/p/cmucc/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://demo.stack.jimmycai.com/p/cmucc/</guid><description>&lt;img src="https://hackmd.io/_uploads/BkeM-EIfR.jpg" alt="Featured image of post CMU Cloud Computing 修課心得" />&lt;h1 id="cmu-cloud-computing-修課心得">CMU Cloud Computing 修課心得
&lt;/h1>&lt;p>在第二學期修了傳說中的 CMU 神課，從以前一直就很好奇到底有多神、神在哪。在確定要修之前也查了蠻多人的修課心得，回饋主要分為兩派&lt;/p>
&lt;ul>
&lt;li>支持派：學到很多、業界實用性很高&lt;/li>
&lt;li>反對派：學得太雜太淺、花太多時間做繁瑣的工作&lt;/li>
&lt;/ul>
&lt;p>但 SV 校區能修的好課也不多，因此最後還是決定修了。&lt;/p>
&lt;h3 id="評分標準">評分標準
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.cs.cmu.edu/~msakr/15619-s24/index.html" target="_blank" rel="noopener"
>詳細課程大綱&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Number&lt;/th>
&lt;th>Weight&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Content Checkpoint Quizzes&lt;/td>
&lt;td>10 out of 11&lt;/td>
&lt;td>20%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Projects 15-319&lt;/td>
&lt;td>5 out of 6 for 15-319&lt;/td>
&lt;td>80%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Projects 15-619&lt;/td>
&lt;td>5 out of 6 + Team for 15-619&lt;/td>
&lt;td>60% + 20%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Total Grade&lt;/td>
&lt;td>&lt;/td>
&lt;td>100%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>15-319 是大學部的課程， 15-619 則是研究所版本，差別僅在於 team project 以及學分數，而 MSSE 這個 Program 可以接受我們修大學部的版本。此外，這堂課的 workload 會因 team project 而變大許多，如果不打算花太多時間在修課方面，修 undergrad 是完全 ok 的。&lt;/p>
&lt;h3 id="教學方式">教學方式
&lt;/h3>&lt;p>我覺得這堂課的授課方式對我來說真的是太新奇了，因此完全值得特別提出來講。這堂課程是完全遠端的，地理範圍橫跨 4 個校區（Pittsburgh, Sillicon Valley, Qatar, Rwanda），修課學生有兩百多人，助教共 16 位。沒有特定的上課時間，給予學生在時間上很大的彈性，學習方式主要是透過做 project，基本上照著提供的 writeup 就可以完成（但通常非常長）。&lt;/p>
&lt;p>因為涉及很多不同的領域，對於沒有基礎的人會提供 primer 讓你熟悉基礎知識，但我認為這也是讓人詬病的地方。primer 通常都講得很淺，看完也不一定會，通常還是要做完 project 才會有點概念這個工具到底在幹嘛。project 則是會給你 starter code，避免你花太多時間在一些小細節上，這個做法同時也讓整個 project 變成很像是填空題的形式，有很多細節必須自己花時間去深入了解。&lt;/p>
&lt;hr>
&lt;h2 id="individual-project">Individual Project
&lt;/h2>&lt;p>project 主要使用 Java 跟 Python，不會也沒什麼關係，跟上面說的一樣主要是填空，程式邏輯跟該 project 相關的知識點才是做不做得出來的關鍵。&lt;/p>
&lt;h3 id="p0-getting-started-with-cloud-computing---data-analytics-using-a-wikipedia-dataset">[p0] Getting Started with Cloud Computing - Data Analytics using a Wikipedia Dataset
&lt;/h3>&lt;p>不算分。讓學生熟悉整個 project 的繳交流程，以及 cloud 的基礎操作。大致上分成幾個部分：&lt;/p>
&lt;ul>
&lt;li>用 GUI console 在 AWS, GCP, Azure 創建資源，並且登入部署基本的網站&lt;/li>
&lt;li>用 terraform 創建資源&lt;/li>
&lt;li>用 Java 做資料前處理以及基本的單元測試＆測試驅動開發&lt;/li>
&lt;li>用 python / pandas / jupyter notebook 做資料分析&lt;/li>
&lt;li>用 grep / awk 做資料分析&lt;/li>
&lt;/ul>
&lt;h3 id="p1-elasticity---horizontal-scaling-and-advanced-resource-scaling">[p1] Elasticity - Horizontal Scaling and Advanced Resource Scaling
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/rkFQYf8GC.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>三個 task：&lt;/p>
&lt;ul>
&lt;li>用 python 或 java 做 ec2 的水平擴充&lt;/li>
&lt;li>根據 loading 做到 auto scaling&lt;/li>
&lt;li>改成用 terraform 做&lt;/li>
&lt;/ul>
&lt;p>如同上圖所示，如果機器開太少讓他超載，就會導致有些請求沒有辦法被處理，但開太多又會讓算力被閒置，換句話說就是浪費錢。這個作業就是在練習達到某個平衡，他要你能夠處理高峰時期的請求，同時又不能開太多機器，並且要維持一定的服務水平，評分依據如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Performance Target&lt;/th>
&lt;th>Threshold&lt;/th>
&lt;th>Score Calculation&lt;/th>
&lt;th>Score&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Instance Hours&lt;/td>
&lt;td>220 &amp;lt;= x &amp;lt;= 280&lt;/td>
&lt;td>$score_{ih} = (280 - x) * 100 / (280 - 220)$&lt;/td>
&lt;td>$min(score_{ih}, 100)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Average RPS&lt;/td>
&lt;td>7 &amp;lt;= x &amp;lt;= 12&lt;/td>
&lt;td>$score_{avgrps} = (x - 7) * 100 / (12 - 7)$&lt;/td>
&lt;td>$min(score_{avgrps}, 100)$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Max RPS&lt;/td>
&lt;td>x &amp;lt; 35&lt;/td>
&lt;td>$score_{maxrps} = -5$&lt;/td>
&lt;td>$min(score_{maxrps}, 0)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>$$
Total\ score = \frac{(score_{ih} + score_{avgrps}) \times 40}{2 \times 100} + score_{maxrps}
$$&lt;/p>
&lt;p>這次比較蠻麻煩的點是 task 2 每提交一次，就要等約 50 分鐘才會有結果（當然如果覺得有問題也可以自己提前結束）。&lt;/p>
&lt;h3 id="p2-containers-docker-and-kubernetes---linux-containers">[p2] Containers: Docker and Kubernetes - Linux Containers
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/SkDcFfUfA.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>使用 Docker 將服務容器化，並且部署到 Google Kubernetes Engine (GKE) 跟 Azure Kubernetes Service (AKS) 上，最後還要做 CI/CD 將整個流程自動化。這個 project 說大不大說小不小，全部做完花的時間並沒有很多，但是對這個主題有興趣的人，可以花很多時間在他的細節上。舉例來說，我們要容器化的服務是用 Java Spring Boot 寫的，其中還有用到 Redis Pub/Sub、STOMP 之類的技術，以及這個 micro-service 的架構是基於什麼理由選擇的，這些都蠻值得花時間去探討。&lt;/p>
&lt;p>我做完這個 project 之後馬上把它寫到履歷上，後來就拿到了兩個相關的面試，代表這些技術還算是當前蠻熱門的。&lt;/p>
&lt;h3 id="p31-cloud-storage---sql-and-nosql">[P3.1] Cloud Storage - SQL and NoSQL
&lt;/h3>&lt;p>note: P3.1 跟 P3.2 都只有一個禮拜能做，但內容都不多（又或者是說很水）&lt;/p>
&lt;p>對於 SQL 跟 NoSQL 的小練習，分別使用 MySQL、MongoDB 跟 Redis。基本上指令都給好了，真正要想的地方很少，無腦就可以做完。&lt;/p>
&lt;h3 id="p32-cloud-storage---heterogeneous-storage-on-the-cloud">[P3.2] Cloud Storage - Heterogeneous Storage on the Cloud
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/HJHKTGLfC.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>部屬一個類似臉書的應用程式，其中的不同資料分別會用到不同種類的資料庫，最後還會把他串起來，成品大概長這樣：&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/S1WxAf8G0.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>其實我覺得主題還挺有意思的，現在的網站真的都是資訊爆量的狀況，對於不同的資料都有適合的存儲方式，如果有遵守最佳實踐的話，小小一個請求可能會像扇形那樣擴展開來，像後端的不同微服務去做連結。&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BJg2AMUfA.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>但其實這個 project 的工作量跟 P3.1 差不多，如果有興趣的話還是得要自己去深入研究。&lt;/p>
&lt;h3 id="p4-iterative-processing-with-spark">[P4] Iterative Processing with Spark
&lt;/h3>&lt;p>學期後半來到了資料處理的部分，這個 project 是將簡化的推特資料處理過後做成 PageRank 的推薦系統，強制使用 spark + scala 來做。資料總共 10G，這裡使用 Azure 的 HDInsight 來開集群，一小時就要花 3 美金。&lt;/p>
&lt;p>我認為算是在這邊學到蠻多的，畢竟之前處理資料的時候就是寫一個 python 然後讓他在那邊跑，從來沒有想過也可以用分散式運算來加速整個過程。這個工具除了介面有點舊之外，整體算是非常的完善。此外，這邊會跟小考那邊的閱讀部分關聯性蠻大的，有些背景知識我沒有好好去讀，在實際遇到問題的時候真的完全不知道該怎麼解決。&lt;/p>
&lt;p>然後這個 project 的 writeup 問題十分之多，讓我花很多時間在根本不應該花時間的地方，我真是謝：）&lt;/p>
&lt;h3 id="make-up-functions-as-a-service">[Make-up] Functions as a Service
&lt;/h3>&lt;p>學期間突然出現的一個補救方案，教無伺服器運算，但我因為太忙 drop 掉了&lt;/p>
&lt;h3 id="p5-stream-processing-with-kafka-and-samza">[P5] Stream Processing with Kafka and Samza
&lt;/h3>&lt;p>因為太忙 drop 掉了&lt;/p>
&lt;h3 id="p6-machine-learning-on-the-cloud">[P6] Machine Learning on the Cloud
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/ryevEQIMR.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>做了一個紐約市叫車價格預測 app，用 Google 的 Vertex AI 來做機器學習，使用 XGBoost 這個模型。雖然我大學有修過機器學習，但我幾乎都還給教授了。這裡也沒有很多的著墨，starter code 裡面已經完成了大部分，我們幾乎就是負責調參。我覺得算是對於現在大型的機器學習模型該如何訓練跟部署在雲端也是有點概念，但也僅止於淺嚐而已。&lt;/p>
&lt;hr>
&lt;h2 id="reading--quiz">Reading &amp;amp; Quiz
&lt;/h2>&lt;p>每週一次小考，在時間範圍內自己決定時間考，開始之後倒數計時兩小時寫。每次小考約有 10~20 篇的文章要讀，掃過大概要花 1~2 小時。主題很廣，跟 project 有一點點關聯，但也沒有說不會就做不出來。小考也不會難到很誇張，但是如果想要拿滿分的話，之前沒有學過相關內容的話，會需要蠻多時間消化的。&lt;/p>
&lt;p>比較好的做法是每天看一點，嘗試完全理解閱讀內容，照理來說小考不會是問題。但我是沒有認識的人這樣真的做啦：）&lt;/p>
&lt;p>內容包含：&lt;/p>
&lt;ul>
&lt;li>Introduction to Cloud Computing
&lt;ul>
&lt;li>Cloud Computing Overview&lt;/li>
&lt;li>Economics, Benefits, Risks, Challenges and Solutions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cloud Infrastructure
&lt;ul>
&lt;li>Data Center Trends&lt;/li>
&lt;li>Data Center Components&lt;/li>
&lt;li>Cloud Management&lt;/li>
&lt;li>Cloud Software Deployment Considerations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cloud Storage
&lt;ul>
&lt;li>Cloud Storage&lt;/li>
&lt;li>Case Studies: Distributed File Systems&lt;/li>
&lt;li>Case Studies: NoSQL Databases&lt;/li>
&lt;li>Case Studies: Cloud Object Storage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Distributed Programming and Analytics Engines for the Cloud
&lt;ul>
&lt;li>Introduction to Distributed Programming for the Cloud&lt;/li>
&lt;li>Distributed Analytics Engines for the Cloud: MapReduce&lt;/li>
&lt;li>Distributed Analytics Engines for the Cloud: Spark&lt;/li>
&lt;li>Distributed Analytics Engines for the Cloud: GraphLab&lt;/li>
&lt;li>Message Queues and Stream Processing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Virtualizing Resources for the Cloud
&lt;ul>
&lt;li>Introduction and Motivation&lt;/li>
&lt;li>Virtualization&lt;/li>
&lt;li>Resource Virtualization - CPU&lt;/li>
&lt;li>Resource Virtualization - Memory&lt;/li>
&lt;li>Resource Virtualization – I/O&lt;/li>
&lt;li>Case Study&lt;/li>
&lt;li>Storage and Network Virtualization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="team-project-high-performance-web-service">Team Project: High Performance Web Service
&lt;/h2>&lt;p>&lt;img src="https://hackmd.io/_uploads/BJzCtGIzC.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="phase-1">Phase 1
&lt;/h3>&lt;p>總共要做 3 個 web service，分別是：&lt;/p>
&lt;ul>
&lt;li>blockchain&lt;/li>
&lt;li>QRcode&lt;/li>
&lt;li>Recommendation System&lt;/li>
&lt;/ul>
&lt;p>三個其實沒有什麼關聯，但在 Phase 2 跟 Phase 3 live test 的時候會同時向三個服務發送請求，在這個階段就是讓服務能夠正確跑起來，並且在預算內達到一定的 Request Per Second (RPS)。&lt;/p>
&lt;p>這個階段比較像是讓我們去測哪個 web framework 跟 programming language 比較快，還有把整個服務串起來而已。&lt;/p>
&lt;h3 id="phase-2">Phase 2
&lt;/h3>&lt;p>第二階段對於 twitter service 的要求會再提高，並且加入了 live test。所謂 live test 就是老師會在同一時段向所有組別的服務發送請求，然後如果你在這個時段服務爆了，或是出任何問題的話，就直接會反映在你的成績上。然後這邊每小時的預算也要算好，如果在 live test 上每個小時花超過 0.7 鎂就會依比例扣分。&lt;/p>
&lt;h3 id="phase-3">Phase 3
&lt;/h3>&lt;p>第三階段則是讓我們測試更現代化的部屬方式，我們從原先用 kops 轉換到 EKS 上，儲存方式也從自己部署 mysql 變成 AWS 上的各種資料儲存服務。&lt;/p>
&lt;h3 id="隊友">隊友
&lt;/h3>&lt;p>其實我覺得 team project 的體驗很大程度在於隊友上，我覺得我算是被 carry 的那個，雖然最後沒有拿下榜一，但也算是排名靠很前面了，況且在 Phase 1 我們進度幾乎是領先所有隊伍好幾個禮拜，學期中也收到了下學期的 TA 面試邀請。我也有聽說其他組不太好的狀況，像什麼消失的拉，去寫其他作業的拉。&lt;/p>
&lt;p>期末問卷有問到「如果重來你會怎麼選擇隊員」，其實我到現在也很難給出一個明確的答案。學期初教授其實有發信說不推薦跟認識的人，似乎以歷屆的數據來說，這種組隊方式狀況都會不太好。我自己這個組算是亂找的，因為我原本是想跟認識的人一起，但後來出了一些誤會導致我必須另尋組員。就我的結果來說還算不錯，只是我真的很難去下結論說跟熟人組隊就會比較不好。&lt;/p>
&lt;hr>
&lt;h2 id="其他">其他
&lt;/h2>&lt;h3 id="ta">TA
&lt;/h3>&lt;p>我有個同屆的台灣同學因為第一學期就跑去修 CC，所以我修這堂課的這學期就一直狂問他。根據他的描述，其實 TA 也並不會對整個課程了解透徹，他是跟我說他在 Office Hour 的時候也是看著他去年的作業在回答的，每個 TA 都有負責的 project，你可能只會對那個 project 特別熟。&lt;/p>
&lt;p>然後這個 TA 的工作量好像特別大，他每週好像都會報滿 20 個小時（國際學生兼職時數上限），學生又超多，問問題的論壇常常都是爆滿的狀況，然後有些問題水平我看了也覺得這些人到底怎麼上 CMU 的＝＝，好處就是可以認識 SCS 學院的教授，還有一些主校區的神人同學。&lt;/p>
&lt;h3 id="sail--oli-platform">Sail() &amp;amp; OLI platform
&lt;/h3>&lt;p>學期末有一個超長的問卷是針對課程內容以及這兩個平台去做詢問的，Sail() 是做 project 的網站， OLI 則是閱讀跟小考。好像這堂課的授課方式會這麼特別就是因為這算是一個電腦科學教育方面的研究吧，而這兩個平台就是輔助的工具，說不定之後會上市之類的，但我個人是認為以學生視角來說這兩個平台並沒有特別突出的點。&lt;/p>
&lt;hr>
&lt;h2 id="參考資料">參考資料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://medium.com/cloud-guru-%E7%9A%84%E5%BE%81%E9%80%94/cmu-%E7%9A%84-m-s-software-engineering-%E7%AC%AC%E4%BA%8C%E5%AD%B8%E6%9C%9F%E5%BF%83%E5%BE%97-44b1dddf9af9" target="_blank" rel="noopener"
>CMU 的 M.S. Software Engineering 第二學期心得&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.heron.me/cloud-computing%E9%80%99%E5%A0%82%E8%AA%B2-101b31f9d306" target="_blank" rel="noopener"
>CMU的Cloud Computing這堂課&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.zhihu.com/question/30405519" target="_blank" rel="noopener"
>在CMU学习15319/619 Cloud Computing是种怎样的体验？&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CMU-SV MSSE 第二學期心得</title><link>https://demo.stack.jimmycai.com/p/cmusv-semester-2/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://demo.stack.jimmycai.com/p/cmusv-semester-2/</guid><description>&lt;img src="https://hackmd.io/_uploads/H1RjDbrM0.jpg" alt="Featured image of post CMU-SV MSSE 第二學期心得" />&lt;h1 id="cmu-sv-msse-第二學期心得">CMU-SV MSSE 第二學期心得
&lt;/h1>&lt;p>寒假回台灣了，大約在十二月中到一月中回台灣耍廢了一個月。&lt;/p>
&lt;p>也因為第一學期沒有找到實習，因此我希望將第二學期的重點擺在找工作，並且考慮到以下幾點：&lt;/p>
&lt;ul>
&lt;li>我感覺自己目前有的技能有點難找到，因此希望透過修課能多學一些熱門的技術&lt;/li>
&lt;li>第一學期 FSE 其實並沒有想像中累，每週工作量可以再預估多一點&lt;/li>
&lt;li>履歷已經改到沒東西寫了，最好可以加一點東西&lt;/li>
&lt;/ul>
&lt;p>SV 校區的修課選項真的不多，而且 CMU 其實雷課也不少，避免踩雷我決定修了一堂傳說中的神課 CC。春季其實還有一堂蠻多人推的 14-736 Distributed Systems，但因為一些原因我後來沒修，聽說作業也會花蠻多時間寫的（我一位同時修 CC 以及 DS 的同學表示：千萬不要搞自己）&lt;/p>
&lt;hr>
&lt;h2 id="修課">修課
&lt;/h2>&lt;h3 id="cloud-computing">Cloud Computing
&lt;/h3>&lt;p>總之就是學各種跟 AWS、GCP、Azure 相關的技能，因為這堂課太有名了因此另外幫他獨立寫了一篇。&lt;/p>
&lt;h3 id="foundation-of-database-design">Foundation of Database Design
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/HkM2pa4zR.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;blockquote>
&lt;p>不知道主視覺是誰設計的，蠻好看的哈哈&lt;/p>
&lt;/blockquote>
&lt;p>這堂課在教資料庫設計，課堂內容大概是參考 sqlite 跟 15-445/645 Intro to Database Systems 來的，使用 C++。作業有 3 個，小組作業 1 份，加上 2 個很小的 lab。&lt;/p>
&lt;p>我大概到第三第四週就開始不知道在幹嘛了吧，拜 ChatGPT 所賜作業都還是寫得出來，但也因此學到的並不是很多，每週花不超過 10 小時。因為是剛開的課很多東西都不太完整，&amp;ldquo;聽說&amp;quot;作業 2 甚至是因為教授收的 RA 來不及出而延後了很久，學期後面上課學生出席率應該不到 40%。&lt;/p>
&lt;h3 id="how-to-write-fast-code-ii">How to Write Fast Code II
&lt;/h3>&lt;p>主校區廣播過來的遠距課，主要是教 OpenMP 跟 Cuda，聽說是 15-418 Parallel Computing 的低配版。作業 4 個，小組作業 1 個，學期中後段讀了 7 篇有關高性能運算的 paper，如果想要爭取上課參與分數可以自己報名去報 paper。&lt;/p>
&lt;p>沒錯，這堂課有上課參與分數，而且老師很喜歡一直問大家的意見，如果沒有人理他他就在那邊跟大家僵持不下，然後不錄影，上課沒去就沒了（雖然去了也不知道他在講什麼）。&lt;/p>
&lt;p>前面 OpenMP 的部分還算簡單，但後面 GPU 那邊會用到一些 Fast Code I 跟一些計算機很底層的內容，如果自己沒有相關知識幾乎就聽不懂了。我的組員有一位有上過 Fast Code I，每週 Office Hour 幾乎都會去跟教授交流，但我看他後面也是不知道在幹嘛，所以如果有想選這系列課程的請想清楚：）&lt;/p>
&lt;p>我印象蠻深刻的一點是老師學期初有說：「我們要 parallelize code，而不是 paralyze code」，我當初一直覺得這個冷笑話很難笑，但到學期末的時候才發現他不是在說笑，而是真的常常反而改一改變更慢&lt;/p>
&lt;p>總體來說，我覺得如果有花時間在上面還是有些收穫的，推薦給對 High Performance Computing 有興趣，會自己去查相關資料，然後喜歡跟教授喇賽的人修。&lt;/p>
&lt;h3 id="tasoftware-engineering-methods">（TA）Software Engineering Methods
&lt;/h3>&lt;p>我在第一學期結束之前其實一直就有在想要不要當助教，主要是因為：&lt;/p>
&lt;ol>
&lt;li>來這邊幾乎沒講到英文，感覺當助教會需要跟教授還有學生做很多互動&lt;/li>
&lt;li>想要多水一點工作經驗，而且這是美國當地的&lt;/li>
&lt;li>辦 ssn&lt;/li>
&lt;li>賺點錢，就算是最低時薪至少可以 cover 大部分的房租&lt;/li>
&lt;/ol>
&lt;p>學期結束那陣子 Cecile 就有寄信給大家問有沒有人要當 FSE 跟這堂課的 TA，FSE 的部分有上過就大概知道要幹嘛，我也問了我們組的 TA，他本人是跟我說不推。另外就是這堂課了，因為這堂課只開在春季班，所以我也沒有上過，但以 Cecile 信中的描述感覺我的背景挺適合的，抱著問了沒損失的心態我就寄了信給教授，他隔天回信說跟我歷年來很少有 TA 上過這堂課，並且他看了一下我的履歷還有我在 FSE 的 commit 還有 PR review，覺得很適合，就直接收我了，唯一需要注意的點就是如果當助教的話就不能修這堂課。&lt;/p>
&lt;p>這堂課主要內容在教大型軟體團隊的開發方法，像是 LeSS、DAD、SAFe，而程式部分則是老師會決定一個 Web App 的主題來讓大家一起開發，而我這一屆是 Instant Response。基本上除了前端使用 React.js 之外，其他內容都跟 FSE 一樣，其實幾乎所有東西都是可以全班一起討論決定的，包含要用哪種開發方法，以及要用什麼技術棧。雖看似自由，但因這堂課是 core，想划水的人有很多，想要嘗試一些特別的東西必須要先說服其他人，如果要花很多時間去學的話就很容易被大家否決。當然可以自幹，只是除了每個 sprint 都不長之外，還有一些必須要完成的 feature，如果還有修其他課的話真的不會想多花時間在上面。&lt;/p>
&lt;p>這堂課會推薦給只想寫 Web 前後端，或是很想認識人的人，因為除了小組之外也會有很多跨組的討論。大概學期中就幾乎沒什麼上課了吧，期末一半以上都有 A，沒有期末考，但我看他們每週好像都花蠻多時間在上面的。&lt;/p>
&lt;p>至於助教主要內容就是他們學期初的 recitation，教大家 typescript, react, redux, storybook，還有看教授叫你幹嘛就幹嘛，每週工作時數平均下來絕對 &amp;lt; 10，如果只是當打工完全 ok&lt;/p>
&lt;h3 id="選課心得">選課心得
&lt;/h3>&lt;p>選到第二次課，總結一下個人的 CMU 選課心得：&lt;/p>
&lt;ul>
&lt;li>新生優先權最低，來的第一學期可能不能期望修到什麼好課&lt;/li>
&lt;li>個人推薦可以每個學期選兩堂必修＋一堂選修&lt;/li>
&lt;li>很多課都會希望先修過 FCS，如果沒有特別的想法第一學期可以考慮修一下，而且很多人都是第一學期修，大家可以一起討論&lt;/li>
&lt;li>如果很在意找工可以先修 CC，他會一次教很多業界現正熱門的技術，如果想要跟大家一起討論可以在春季修&lt;/li>
&lt;li>剛入學 advisor 會一直恐嚇你說 FSE、FCS、CC 這三堂課中，不要在同一學期修任意兩堂。但我覺得其實也沒有那麼嚴重&lt;/li>
&lt;li>除非可能影響到畢業，不然儘量不要選自己沒興趣的課，除了浪費學費之外（一堂課約台幣二十萬），還會浪費很多時間在上面&lt;/li>
&lt;li>如果是 SV 校區其他 program 的學生，我個人是完全不推薦修 SE 的必修課程。第一是這是我們的畢業條件，我們真的很需要趕緊將它處理完，第二是這些課程品質真的沒有好到值得跟我們搶，好課請選主校區廣播過來的&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="找工">找工
&lt;/h2>&lt;p>找實習部分另外獨立出來一篇了。&lt;/p>
&lt;p>以秋季班台灣人來說上岸率為 3/5，整個學校體感大概只有一半找到實習吧，最近真的很慘，不推薦沒有工作經驗的人來。&lt;/p>
&lt;p>國際學生春季班入學應該是不能實習的，但我們這邊有一位秋季先到 USC，春季再來 CMU SV 的神人上 Google Intern，詳情請見&lt;a class="link" href="https://medium.com/@jhan1998/summer-2024-intern-summary-b6ab14d0c253" target="_blank" rel="noopener"
>他的 medium 文章&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="旅遊">旅遊
&lt;/h2>&lt;p>&lt;img src="https://hackmd.io/_uploads/rymt4WBzC.jpg"
loading="lazy"
alt="IMG_2977"
>&lt;/p>
&lt;blockquote>
&lt;p>自由女神在一個要搭船去的小島上，而我在搭船的時候收到 offer，我很高興的跑到我朋友旁邊跟他們說「我還沒上岸就上岸了」&lt;/p>
&lt;/blockquote>
&lt;p>春假跑到紐約去玩了六天，算是出國之後第一次認真出去旅遊，不然真的每天都是寫作業跟找工作QQ&lt;/p>
&lt;p>心得就是：紐約好髒、好貴、好無聊，我甚至在美術館睡著＝＝&lt;/p>
&lt;p>但回來之後意外發現，因為很多電影跟連續劇的背景都是在紐約，在去過之後會對於劇情更有帶入感，這麼想也算是值回票價了吧：）&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HkpKIbHzC.jpg"
loading="lazy"
alt="IMG_2960"
>&lt;/p>
&lt;blockquote>
&lt;p>時代廣場 aka 廣告廣場，我真的超討厭廣告，真的不能理解這種塞滿廣告的地方也能成為一個景點？_？&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="外部連結">外部連結
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.cmu.edu/career/outcomes/masters-internship-dashboard.html" target="_blank" rel="noopener"
>CIT &amp;amp; SCS Masters Internships&lt;/a> 下方 program 欄位可以只選擇 Software Engineering，就可以看到 MSSE 的實習找工狀況（只有有回報的人的資料）&lt;/li>
&lt;/ul></description></item><item><title>CMU-SV MSSE 第一學期心得</title><link>https://demo.stack.jimmycai.com/p/cmusv-semester-1/</link><pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate><guid>https://demo.stack.jimmycai.com/p/cmusv-semester-1/</guid><description>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/d/d4/Carnegie_Mellon_West_Building_23_Front_Entrance.jpg" alt="Featured image of post CMU-SV MSSE 第一學期心得" />&lt;h1 id="cmu-sv-msse-第一學期心得">CMU-SV MSSE 第一學期心得
&lt;/h1>&lt;p>&lt;img src="https://sv.cmu.edu/_files/images/logos/cmusv.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="program-簡介">Program 簡介
&lt;/h3>&lt;p>program 全名為 Master of Science in Software Engineering，找工向 program，16 個月畢業，如果是春季入學的話不能實習，除非你先去其他學校半個學期&lt;/p>
&lt;p>在收人方面我感覺托福 95+ 應該就夠了，背景我猜是看工作經歷，然後如果有網頁開發感覺更好（畢竟這邊必修主要都教這個），但也是有部分人沒有工作經驗。另外轉碼感覺也蠻友好的，很多大學都不是 CS 畢業的&lt;/p>
&lt;p>MSSE 畢業所需學分數為 97，但每學期至少修滿 36 學分（== 3堂課），且每學期至多能選一堂遠距課程。（第一學期有一堂一學分的必修課叫做 intro to grad study）&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HytTKWAUT.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>必修課總共有八堂，畢業條件是五堂，其中一堂可以用跟教授做 research 來抵免，或是有什麼特殊原因可以用其他選修來抵（需要提交申請，但聽說通常不會過）&lt;/p>
&lt;p>三堂選修課可以選主校區的課，但選擇不多，如果很在意課程品質來這裡可能會很失望。&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ry0cFZAIT.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>老師大概是上面這四位，其中 H 老師好像是這個 program 的老大的樣子吧，但他本人在匹茲堡校區。選課跟 research 的話大家都會推 Leo&lt;/p>
&lt;p>（第二學期的我：SV 校區的課還是不要抱太大的期望🥲）&lt;/p>
&lt;hr>
&lt;h2 id="選課">選課
&lt;/h2>&lt;h3 id="18-652-foundation-of-software-engineering">18-652 Foundation of Software Engineering
&lt;/h3>&lt;p>這個 program 的必修中的必修，一定要在第一學期修完，不然很多必修都會擋這堂課。&lt;/p>
&lt;p>基本上只有 SE 的學生選得到這堂課，但我覺得其他 program 應該也不會想修這堂課：）&lt;/p>
&lt;h4 id="syllabus">Syllabus
&lt;/h4>&lt;p>&lt;a class="link" href="https://docs.google.com/document/d/1en0Hlw9SL1zkjHdfYg3ewvW-xFNuyUzaTQ5bUlDYNAM/preview" target="_blank" rel="noopener"
>https://docs.google.com/document/d/1en0Hlw9SL1zkjHdfYg3ewvW-xFNuyUzaTQ5bUlDYNAM/preview&lt;/a>&lt;/p>
&lt;h4 id="grading-rubric">Grading Rubric
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Component&lt;/th>
&lt;th>Performance Criterion&lt;/th>
&lt;th>Weight (%)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Final Quiz&lt;/td>
&lt;td>Individual&lt;/td>
&lt;td>20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pre-enrollment Assignment&lt;/td>
&lt;td>Individual&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Readiness Quizzes (Post-prep quizzes and In-class Q&amp;amp;As)&lt;/td>
&lt;td>Individual&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Collaboration Skills Training&lt;/td>
&lt;td>Individual&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SE Project Iteration 4&lt;/td>
&lt;td>Individual&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SE Project Iterations 0, 1, and 2*&lt;/td>
&lt;td>Team&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SE Project Iterations 3 and 5*&lt;/td>
&lt;td>Team&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SE Project Presentation&lt;/td>
&lt;td>Team&lt;/td>
&lt;td>10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Show-and-Tell Presentation&lt;/td>
&lt;td>Team&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Total&lt;/td>
&lt;td>-&lt;/td>
&lt;td>100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Total with bonus points (max. 3 points) (awarded in general for exceptional class participation at the discretion of the faculty)&lt;/td>
&lt;td>-&lt;/td>
&lt;td>103&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="課程內容">課程內容
&lt;/h4>&lt;ul>
&lt;li>Software development methods&lt;/li>
&lt;li>Object-oriented technology&lt;/li>
&lt;li>Object-oriented analysis and design&lt;/li>
&lt;li>Requirements&lt;/li>
&lt;li>Software architecture&lt;/li>
&lt;li>Design patterns&lt;/li>
&lt;li>Software testing&lt;/li>
&lt;li>Technical development practices&lt;/li>
&lt;li>Code quality: code reviews and static analysis&lt;/li>
&lt;li>Software project planning and estimation&lt;/li>
&lt;/ul>
&lt;p>課程內容為所有跟軟體工程相關的知識，包含開發方法（scrum, kanban）、軟體架構、設計模式、軟體測試、品質管理&amp;hellip;等，每個知識點都不會到太深。&lt;/p>
&lt;p>上課的方式是先在家看預錄的影片（通常不超過半小時，目測大概是三到五年前錄的），看之前有個 pre-quiz 讓你對於接下來會講的內容有點概念，看完之後有個 post-quiz 驗收，並且會算到成績裡面。上課也會有課堂小考，並且針對影片內容做更深入的討論，但大部分的時間會做跟 group project 相關的活動與討論。&lt;/p>
&lt;h4 id="group-project">Group Project
&lt;/h4>&lt;p>課程透過網頁前後端開發來實踐上課的內容，技術規定後端使用 express.js，前端 &amp;ldquo;不能&amp;rdquo; 使用任何開發框架（React/Vue/Angular），其餘都可以自己決定。這個專案會有大約 4~5 人的團隊下去進行，是由老師透過一個小調查來隨機分組，每週都會跟 TA (scrum master) 有一個 meeting，個人覺得進度蠻緊湊，常聽說有組別會為了趕 deadline 而熬夜。&lt;/p>
&lt;p>每次 iteration 都有約兩到三個 use case 要去做，時長大約是兩個禮拜。mid-iteration會驗收跟文件比較相關的內容（OOAD、RESTAPI 文件、流程圖），end-iteration 則是看 demo。每次 iteration 都會多加一些額外的需求，像是要加入單元測試、加入 CI/CD、使用第三方靜態分析工具並提升品質到多少等。&lt;/p>
&lt;p>第四次迭代會需要每人自己提出要做的功能，而且內容必須包含前後端、CRUD 四種操作、要有兩個以上使用者的互動，所以不能說你在整個學期都只會做某方面的事情而已。第五次迭代則是要重構並且整合第四次迭代的所有功能，還有其中一個 use case 讓蠻多組別整個程式碼大重寫 &amp;ndash; 允許使用者更改使用者 id。因為很多人直接用使用者 id 來當作資料庫的 row unique id，在前四次迭代因為他的確是獨一無二的，因此都完全沒問題，但第五次迭代加入這個功能之後，除了要大改資料庫之外，因為到這個階段程式碼也不少了，常常牽一髮動全身，因此最後聽說蠻多組別在熬夜的。&lt;/p>
&lt;h4 id="心得">心得
&lt;/h4>&lt;p>常聽到有人抱怨說這堂課沒什麼用，但卻要花很多時間。但我認為這堂課名畢竟叫做「軟體工程」而非「網頁開發」，核心還是這些軟體工程相關的知識。這也反映到這個 program 比較偏找工向的特色，課程並非是這個 program 的重點（雖然依舊有一些主校區的神課可以選），如果想要在這裡學到一些硬知識底子還是有點困難的。&lt;/p>
&lt;p>此外，學期初的分組將會決定這整個學期的學習體驗，有看到有些組別好到不行，也有吵架翻臉的。&lt;del>然後學期初的調查可以把自己寫的爛一點，可能比較容易配到大神（？&lt;/del>&lt;/p>
&lt;hr>
&lt;h3 id="18-654-software-testing-and-verification">18-654 Software Testing and Verification
&lt;/h3>&lt;h4 id="grading-algorithm">Grading Algorithm
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>15%&lt;/th>
&lt;th>Project 1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>15%&lt;/td>
&lt;td>Labs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30%&lt;/td>
&lt;td>Assignments&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15%&lt;/td>
&lt;td>Midterm Exam&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15%&lt;/td>
&lt;td>Final Exam&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10%&lt;/td>
&lt;td>Participation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>100%&lt;/td>
&lt;td>TOTAL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="心得-1">心得
&lt;/h4>&lt;p>前半段教各式軟體測試方法，後半段教軟體驗證。主要使用 Java，軟體驗證用到 spin / promela。&lt;/p>
&lt;p>兩次作業四次 Lab，Lab 允許兩個人一起寫。學期中還有一個大 project，是用課上教的方法應用在開源的專案上。如果 project 沒有堆到最後才在做的話，這堂課的作業應該都不會花到太多時間。&lt;/p>
&lt;p>上課方式就是普通的講課，老師在主校區所以是用遠端連線的，沒來不會給 Zoom 連結，但也不點名。老師會很期待大家跟他互動，只是他講得沒有什麼起伏，大家也不知道聽不聽得懂，所以通常不太會有人理他😂&lt;/p>
&lt;p>期中期末考試前老師會給考古，基本上做到熟就能拿到蠻高的分數，如果能透徹理解拿滿應該是沒問題的，班上平均應該有 90% 以上吧，認識的人都拿Ａ（學期成績 90+）。&lt;/p>
&lt;p>我自己認為教的主題都還蠻有趣的，課程規劃的也很好。但我感覺課程的教材好像很久沒有更新了，promela 也不知道有沒有人在用，常常會有在用上古時期的工具的感覺。另外，因為作業比較偏向 Lab 的形式，個人覺得學得雖廣但有點淺。&lt;/p>
&lt;hr>
&lt;h3 id="18-656-functional-programming-in-practice">18-656 Functional Programming in Practice
&lt;/h3>&lt;p>&lt;img src="https://hackmd.io/_uploads/Hk2pPEWYp.png"
loading="lazy"
alt="上完這堂課覺得學期初老師給的這張圖完全沒有騙人騙人😅"
>&lt;/p>
&lt;p>學期前半介紹 functional programming 的基本概念跟 F# 基礎語法，接著兩週的 Domain Driven Design 工作坊做後續期末 project 的系統設計，後面是比較進階的的概念（ex: railway oriented programming, map reduce）&lt;/p>
&lt;p>期末 project 是做一個加密貨幣套利的系統，全部都必須使用 F#，並且完全遵照 functional programming 的規範。後期會跟一些 Azure 的服務做串接，另外還有一些加分的串接項目（ex: 使用 Azure HDInsight、把系統做成分散式運算、部署）。&lt;/p>
&lt;blockquote>
&lt;p>好像很多人聽到加密貨幣就覺得很潮，但除了 App 場景應用在加密貨幣上之外，其他完全沒有關聯。&lt;/p>
&lt;/blockquote>
&lt;p>對於微軟的開發生態系不熟悉的人在這邊可能會有點吃力，而且學了一個 F# 還真的不知道要幹嘛，到底有誰在用這個＝＝？此外，我也真的聽不太懂這個老師上課到底在教什麼，有可能是我英文太差的問題，但好像也蠻多人反映聽不懂的。&lt;/p>
&lt;p>前半學期我除了上課之外鮮少會再額外花時間，所以我常常推坑別人說這堂很水。但後期做 project 又突然變得超肝，老師也有注意到這個問題，一直把作業需求改低，最後甚至還有因為測試的 API 老師那邊來不及開發所以不測的。因為是第一個學期開，所以發生這些還蠻可以理解的，後續就不知道會改成怎樣了。&lt;/p>
&lt;hr>
&lt;h2 id="生活">生活
&lt;/h2>&lt;h3 id="校園">校園
&lt;/h3>&lt;p>SV 校區在 mountain view 的 NASA 園區，建築主要只有一棟樓，資源不多但其實學生也不多，會議室幾乎都借得到，自習的話這棟樓各個有桌椅的地方都還蠻合適的。此外還有咖啡機、冰箱、微波爐、各式餐具，如果找得到球友的話還有提供網球、籃球跟橄欖球可以到旁邊玩。但沒有圖書館、沒有餐廳。&lt;/p>
&lt;p>裡面的學生來自三個 master program &amp;ndash; ECE SE, III SM, INI MITE，主要都是中國人跟亞洲人。&lt;/p>
&lt;h3 id="職涯服務">職涯服務
&lt;/h3>&lt;p>可以用學校的 Handshake 平台來預約，職涯顧問人很好很有耐心，但我覺得效果還是蠻有限的，如果完全沒有方向或是當作練英文還蠻合適的，也幾乎都預約的到。&lt;/p>
&lt;p>此外，還有一個叫做 Peer Career Consultant（PCP）的學校組織，他們算是領時薪的學生，如果沒有同儕能幫忙互相看可以去找他們，而且他們常常就坐在大廳等人去問。&lt;/p>
&lt;p>&lt;img src="https://s3.amazonaws.com/handshake.production/app/public/assets/career_fairs/40983/original/Converge2023.png?1685122906"
loading="lazy"
>&lt;/p>
&lt;p>職涯中心除了舉辦 Career Fair 之外，也會常常邀請校友來跟大家介紹自己的公司或一些求職技巧，但這就比較憑個人本事了，目前我認識的人當中還沒有聽到有人因此拿到面試的。&lt;/p>
&lt;hr>
&lt;h2 id="外部連結">外部連結
&lt;/h2>&lt;h3 id="學校資訊">學校資訊
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.ece.cmu.edu/_files/academics/ms-sv-catalog-handbook.pdf" target="_blank" rel="noopener"
>CMU ECE MS Handbook（每年都會更新）&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://drive.google.com/file/d/1lyi4UqW68tXxWm0VEVljh6uLpfHsAFEs/preview" target="_blank" rel="noopener"
>MS-SE Program Orientation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://drive.google.com/file/d/1972yvKWyIHLEr1c1lSjdvp9eXgu4WWmH/preview" target="_blank" rel="noopener"
>ECE Grad Program Overview&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="相關社團">相關社團
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.facebook.com/groups/cmusvtaiwan/" target="_blank" rel="noopener"
>CMU TSS in Bay Area&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.facebook.com/groups/tsstaiwan/" target="_blank" rel="noopener"
>TSS in Pittsburgh&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="課程資訊">課程資訊
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/search" target="_blank" rel="noopener"
>CMU Schedule Of Classes&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://discord.com/channels/@me/1095902258140561509" target="_blank" rel="noopener"
>Discord | @TurtleBot&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cmucourses.com/" target="_blank" rel="noopener"
>CMU Courses&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.google.com/presentation/d/1r4Vv5UZMXRDcf2_79wko1yLAgIHQgNx1XxOJ5lKt92o/" target="_blank" rel="noopener"
>CMUSV 個別課程心得&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="其他參考資料">其他參考資料
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://demo.stack.jimmycai.com/@r1psPkx2S-a3PJEGheDl7g/SkpKlvvm9" >CMUSV TSS Handbook&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-959513-1-1.html" target="_blank" rel="noopener"
>(2023) 进可攻退可守的找工神校：CMU-SV MSSE 第一学期体验&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-925407-1-1.html" target="_blank" rel="noopener"
>(2021) CMU-SE-SV 就读体验及选课分享。很高兴可以看到，这里变得越来越好&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-754839-1-1.html" target="_blank" rel="noopener"
>(2021) yet another CMU-SV-SE一年半的感受/选课/排雷&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-750772-1-1.html" target="_blank" rel="noopener"
>(2021) CMU SE SV劝退指南 - 纠结中的新生必看&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-752084-1-1.html" target="_blank" rel="noopener"
>(2021) CMU SESV劝退贴【续】&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.1point3acres.com/bbs/thread-693086-1-1.html" target="_blank" rel="noopener"
>(2020) CMU SESV 入学感受+劝退指南&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://surviverse.org/" target="_blank" rel="noopener"
>匹茲堡生存手冊&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>